const PROXY = "https://inquirybase.archiverepo1.workers.dev/?url=";
const API_ZENODO = "https://zenodo.org/api/records/?q=*&size=200";
const PAGE_SIZE_DEFAULT = 100;

// --- South African + selected international Figshare endpoints ---
const FIGSHARE_ENDPOINTS = [
  // South Africa
  { name: "University of the Free State (UFS)", url: "https://ufs.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc", country: "South Africa" },
  { name: "University of Cape Town (UCT)",       url: "https://uct.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc", country: "South Africa" },
  { name: "Stellenbosch University (SUN)",       url: "https://sun.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc", country: "South Africa" },
  { name: "University of the Witwatersrand",     url: "https://wits.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc", country: "South Africa" },
  { name: "University of Johannesburg",          url: "https://uj.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",   country: "South Africa" },
  { name: "University of Pretoria (UP)",         url: "https://up.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",   country: "South Africa" },
  { name: "University of KwaZulu-Natal (UKZN)",  url: "https://ukzn.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc", country: "South Africa" },
  { name: "North-West University (NWU)",         url: "https://nwu.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",  country: "South Africa" },
  { name: "Rhodes University (RU)",              url: "https://ru.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",   country: "South Africa" },
  { name: "University of the Western Cape (UWC)",url: "https://uwc.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",  country: "South Africa" },

  // International (a few)
  { name: "Monash University",                   url: "https://monash.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",                 country: "Australia" },
  { name: "Imperial College London",             url: "https://imperialcollegelondon.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc", country: "UK" },
  { name: "University College London (UCL)",     url: "https://ucl.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",                   country: "UK" },
  { name: "University of Melbourne",             url: "https://unimelb.figshare.com/oai?verb=ListRecords&metadataPrefix=oai_dc",               country: "Australia" },
];

// ------- Global state -------
let ALL_ITEMS = [];            // merged view
let CATEGORIES = new Set();    // global categories
let INSTITUTIONS = [];         // list of institution names
let COUNTRIES = [];            // list of countries
let INST_CACHE = new Map();    // institution -> {items:[], loadedPages:number, done:boolean}
let SEARCH_TEXT = "";
let CURRENT_PAGE = 1;
let PAGE_SIZE = PAGE_SIZE_DEFAULT;

const delay = (ms) => new Promise(r => setTimeout(r, ms));

// ------- Progress Bar -------
function createProgressBar() {
  if (document.getElementById("progressBar")) return document.getElementById("progressBar");
  const bar = document.createElement("div");
  bar.id = "progressBar";
  Object.assign(bar.style, {
    position: "fixed", top: "0", left: "0",
    height: "3px", background: "#007bff", width: "0%",
    zIndex: "9999", transition: "width 0.25s ease"
  });
  document.body.appendChild(bar);
  return bar;
}
const progressBar = createProgressBar();
const setProgressText = (msg) => { document.getElementById("results").innerHTML = `<div class="loading">${msg}</div>`; };
const updateBar = (pct) => { progressBar.style.width = `${pct}%`; };

// ------- Utility: XML pick ------
function xmlPick(nsNode, tag) {
  return Array.from(nsNode.getElementsByTagNameNS("*", tag)).map(n => n.textContent.trim());
}

// ------- Fetch one Figshare institution (with proper pagination) ------
async function fetchInstitution(inst, maxPages = 3, progressBase = 0, progressSpan = 100) {
  let url = inst.url;
  const items = [];
  let page = 0;

  while (url && page < maxPages) {
    page++;
    setProgressText(`ðŸ”¹ Harvesting ${inst.name} (page ${page})â€¦ (${items.length} records so far)`);
    updateBar(progressBase + (progressSpan * (page / Math.max(1, maxPages))));

    const res = await fetch(PROXY + encodeURIComponent(url));
    const text = await res.text();
    const xml = new DOMParser().parseFromString(text, "text/xml");

    const recs = Array.from(xml.getElementsByTagNameNS("*", "record"));
    const tokenNode = xml.getElementsByTagNameNS("*", "resumptionToken")[0];
    const nextToken = tokenNode ? tokenNode.textContent.trim() : null;

    recs.forEach(r => {
      const md = r.getElementsByTagNameNS("*", "metadata")[0];
      if (!md) return;

      const title = xmlPick(md, "title")[0] || "(Untitled)";
      const desc  = xmlPick(md, "description")[0] || "";
      const subs  = xmlPick(md, "subject");
      const ids   = xmlPick(md, "identifier");
      const identifier = ids.find(i => i.startsWith("http"))
                         || ids.find(i => /^10\./.test(i)) || "";
      const date  = xmlPick(md, "date")[0] || "";

      subs.forEach(c => c && CATEGORIES.add(c));
      items.push({
        title, description: desc, identifier, date,
        categories: subs, source: "Figshare",
        institution: inst.name, country: inst.country
      });
    });

    if (nextToken) {
      // token can include its own verb param
      url = nextToken.includes("verb=ListRecords")
        ? `https://ndownloader.figshare.com/oai?${nextToken}`
        : `https://ndownloader.figshare.com/oai?verb=ListRecords&resumptionToken=${nextToken}`;
      await delay(200);
    } else {
      url = null;
    }
  }

  return { items, loadedPages: page, done: !url };
}

// ------- Fetch ALL Figshare institutions (light pass by default) ------
async function fetchAllInstitutions(initialPages = 2) {
  const results = [];
  INSTITUTIONS = FIGSHARE_ENDPOINTS.map(e => e.name);
  COUNTRIES = Array.from(new Set(FIGSHARE_ENDPOINTS.map(e => e.country))).sort();

  // setup cache entries
  FIGSHARE_ENDPOINTS.forEach(e => {
    if (!INST_CACHE.has(e.name)) INST_CACHE.set(e.name, { items: [], loadedPages: 0, done: false });
  });

  // Fetch sequentially for stability (many endpoints) â€“ still fast with small page limits
  let idx = 0;
  for (const inst of FIGSHARE_ENDPOINTS) {
    idx++;
    const progressBase = (idx - 1) * (100 / FIGSHARE_ENDPOINTS.length);
    const r = await fetchInstitution(inst, initialPages, progressBase, (100 / FIGSHARE_ENDPOINTS.length));
    const entry = INST_CACHE.get(inst.name);
    entry.items = r.items;
    entry.loadedPages = r.loadedPages;
    entry.done = r.done;
    results.push(...r.items);
  }

  updateBar(50);
  return results;
}

// ------- Deep fetch for a single institution on-demand ------
async function ensureInstitutionFullyLoaded(instName, maxPages = 20) {
  const inst = FIGSHARE_ENDPOINTS.find(e => e.name === instName);
  if (!inst) return;

  const entry = INST_CACHE.get(inst.name) || { items: [], loadedPages: 0, done: false };
  if (entry.done || entry.loadedPages >= maxPages) return; // already loaded enough

  // Continue from the beginning but skip already loaded pages: just refetch â€“ OAI tokens are sequential only.
  // Simplest: load again up to maxPages, then merge new items by identifier (avoid duplicates).
  const fresh = await fetchInstitution(inst, maxPages);
  const mapById = new Map();
  [...entry.items, ...fresh.items].forEach(it => {
    const key = it.identifier || (it.title + "|" + it.date);
    if (!mapById.has(key)) mapById.set(key, it);
  });
  entry.items = Array.from(mapById.values());
  entry.loadedPages = Math.max(entry.loadedPages, fresh.loadedPages);
  entry.done = entry.done || fresh.done;
  INST_CACHE.set(inst.name, entry);
}

// ------- Fetch Zenodo (paged) -------
async function fetchZenodo(maxPages = 5) {
  let url = API_ZENODO;
  const items = [];
  let page = 0;

  while (url && page < maxPages) {
    page++;
    setProgressText(`ðŸ”¹ Harvesting Zenodo page ${page}â€¦ (${items.length} records so far)`);
    updateBar(50 + (page / maxPages) * 50);

    const res = await fetch(PROXY + encodeURIComponent(url));
    const json = await res.json();

    (json.hits?.hits || []).forEach(r => {
      const md = r.metadata || {};
      const title = md.title || "(Untitled)";
      const desc  = md.description || "";
      const doi   = md.doi || "";
      const cats  = [
        ...(md.keywords || []),
        ...(md.subjects ? md.subjects.map(s => s.term) : [])
      ];
      const date = md.publication_date || "";
      cats.forEach(c => c && CATEGORIES.add(c));
      items.push({
        title, description: desc,
        identifier: doi ? `https://doi.org/${doi}` : (r.links?.html || ""),
        date, categories: cats,
        source: "Zenodo",
        institution: "â€”", country: "â€”"
      });
    });

    url = json.links?.next || null;
    await delay(150);
  }

  return items;
}

// ------- Controls (ensure controls exist; create if missing) -------
function ensureControl(id, labelText, elementHTML) {
  const container = document.querySelector(".controls .filters") || document.querySelector(".controls") || document.body;
  let el = document.getElementById(id);
  if (!el) {
    const wrapper = document.createElement("label");
    wrapper.innerHTML = `${labelText}: ${elementHTML}`;
    container.appendChild(wrapper);
    el = wrapper.querySelector(`#${id}`);
  }
  return el;
}

function buildFilters() {
  // Ensure controls exist or create them
  ensureControl("institutionFilter", "Institution", `<select id="institutionFilter"><option value="">All</option></select>`);
  ensureControl("countryFilter", "Country", `<select id="countryFilter"><option value="">All</option></select>`);
  ensureControl("pageSizeSelect", "Page Size", `<select id="pageSizeSelect"><option value="50">50</option><option value="100" selected>100</option></select>`);

  // Fill institution list
  const instSel = document.getElementById("institutionFilter");
  instSel.innerHTML = `<option value="">All</option>` + INSTITUTIONS.map(n => `<option value="${n}">${n}</option>`).join("");

  // Fill country list (from endpoints)
  const countrySel = document.getElementById("countryFilter");
  countrySel.innerHTML = `<option value="">All</option>` + COUNTRIES.map(c => `<option value="${c}">${c}</option>`).join("");

  // Fill category list
  const catSel = document.getElementById("categoryFilter");
  if (catSel) {
    catSel.innerHTML = "<option value=''>All</option>";
    Array.from(CATEGORIES).sort().forEach(c => {
      const opt = document.createElement("option");
      opt.value = c; opt.textContent = c;
      catSel.appendChild(opt);
    });
  }

  // Bind events
  const searchBox = document.getElementById("searchInput");
  if (searchBox) {
    searchBox.addEventListener("input", e => {
      SEARCH_TEXT = e.target.value.toLowerCase();
      CURRENT_PAGE = 1; render();
    });
    searchBox.addEventListener("keypress", e => { if (e.key === "Enter") render(); });
  }

  if (catSel)        catSel.addEventListener("change", () => { CURRENT_PAGE = 1; render(); });
  const srcSel = document.getElementById("sourceFilter");
  if (srcSel)        srcSel.addEventListener("change", () => { CURRENT_PAGE = 1; render(); });
  instSel.addEventListener("change", async () => {
    CURRENT_PAGE = 1;
    const pick = instSel.value;
    if (pick) {
      // On-demand: deepen harvest for chosen institution (up to 20 pages)
      setProgressText(`ðŸŽ¯ Focusing on ${pick}â€¦`);
      await ensureInstitutionFullyLoaded(pick, 20);
      updateBar(100);
      setTimeout(() => (progressBar.style.opacity = "0"), 800);
    }
    render();
  });
  countrySel.addEventListener("change", () => { CURRENT_PAGE = 1; render(); });

  const pageSel = document.getElementById("pageSizeSelect");
  pageSel.addEventListener("change", () => {
    PAGE_SIZE = parseInt(pageSel.value, 10) || PAGE_SIZE_DEFAULT;
    CURRENT_PAGE = 1; render();
  });
  PAGE_SIZE = parseInt(pageSel.value, 10) || PAGE_SIZE_DEFAULT;
}

// ------- Rendering -------
function filteredItems() {
  const catSel  = document.getElementById("categoryFilter")?.value || "";
  const srcSel  = document.getElementById("sourceFilter")?.value || "";
  const instSel = document.getElementById("institutionFilter")?.value || "";
  const ctrySel = document.getElementById("countryFilter")?.value || "";
  const text    = SEARCH_TEXT;

  // build pool from cache (for performance)
  let pool = [];
  if (instSel) {
    // specific institution only (from cache)
    const entry = INST_CACHE.get(instSel);
    pool = entry ? entry.items : [];
  } else {
    // mixed default: merge all cached institutions + Zenodo
    pool = [];
    INST_CACHE.forEach(v => pool.push(...v.items));
    pool.push(...ALL_ITEMS.filter(x => x.source === "Zenodo"));
  }

  return pool.filter(it => {
    const catOK  = !catSel || it.categories?.includes(catSel);
    const srcOK  = !srcSel || it.source === srcSel;
    const instOK = !instSel || it.institution === instSel;
    const ctryOK = !ctrySel || it.country === ctrySel;
    const textOK = !text ||
      (it.title || "").toLowerCase().includes(text) ||
      (it.description || "").toLowerCase().includes(text);
    return catOK && srcOK && instOK && ctryOK && textOK;
  });
}

function render() {
  const mount = document.getElementById("results");
  mount.innerHTML = "";
  const pool = filteredItems();

  const totalPages = Math.ceil(pool.length / PAGE_SIZE) || 1;
  CURRENT_PAGE = Math.min(CURRENT_PAGE, totalPages);
  const start = (CURRENT_PAGE - 1) * PAGE_SIZE;
  const end   = start + PAGE_SIZE;
  const pageItems = pool.slice(start, end);

  if (!pageItems.length) {
    mount.innerHTML = `<div class="loading">No results found.</div>`;
    updatePagination(0, 0);
    updateOverview();
    return;
  }

  pageItems.forEach(it => {
    const card = document.createElement("div");
    card.className = "card";
    const link = it.identifier?.startsWith("http")
      ? it.identifier
      : (/^10\./.test(it.identifier || "") ? `https://doi.org/${it.identifier}` : "");
    card.innerHTML = `
      <div class="source-tag">${it.source}${it.institution ? ` â€¢ ${it.institution}` : ""}</div>
      <h3>${it.title}</h3>
      <p>${(it.description || "").slice(0, 220)}${(it.description || "").length > 220 ? "â€¦" : ""}</p>
      ${link ? `<p><a href="${link}" target="_blank" rel="noopener">View Record â†—</a></p>` : ""}
    `;
    mount.appendChild(card);
  });

  updatePagination(CURRENT_PAGE, totalPages);
  updateOverview();
}

function updatePagination(page, total) {
  const pagination = document.getElementById("pagination");
  const info = document.getElementById("pageInfo");
  if (!pagination || !info) return;
  if (total <= 1) { pagination.classList.add("hidden"); return; }
  pagination.classList.remove("hidden");
  info.textContent = `Page ${page} of ${total}`;
  document.getElementById("prevPage").disabled = page <= 1;
  document.getElementById("nextPage").disabled = page >= total;
}

// ------- Overview -------
function updateOverview() {
  const panel = document.getElementById("overview");
  if (!panel) return;

  // recompute totals from cache + zenodo
  let total = 0, fig = 0, zen = 0;
  const freqCat = {};
  const freqInst = {};

  INST_CACHE.forEach(e => {
    fig += e.items.length;
    total += e.items.length;
    e.items.forEach(it => {
      it.categories?.forEach(c => { if (!c) return; freqCat[c] = (freqCat[c] || 0) + 1; });
      if (it.institution) freqInst[it.institution] = (freqInst[it.institution] || 0) + 1;
    });
  });

  const zenItems = ALL_ITEMS.filter(x => x.source === "Zenodo");
  zen += zenItems.length; total += zenItems.length;
  zenItems.forEach(it => {
    it.categories?.forEach(c => { if (!c) return; freqCat[c] = (freqCat[c] || 0) + 1; });
  });

  document.getElementById("countTotal").textContent    = total;
  document.getElementById("countFigshare").textContent = fig;
  document.getElementById("countZenodo").textContent   = zen;

  const topCats = Object.entries(freqCat).sort((a,b)=>b[1]-a[1]).slice(0,5);
  const topInst = Object.entries(freqInst).sort((a,b)=>b[1]-a[1]).slice(0,5);

  const ul = document.getElementById("topCats");
  if (ul) ul.innerHTML = topCats.map(([c,n]) => `<li>${c} (${n})</li>`).join("");

  // (Optional) show top institutions beneath categories if you add <ul id="topInst"></ul> in HTML
  const instUl = document.getElementById("topInst");
  if (instUl) instUl.innerHTML = topInst.map(([n,c]) => `<li>${n} (${c})</li>`).join("");

  panel.classList.remove("hidden");
}

// ------- Hero BG -------
function initHeroBg() {
  const canvas = document.getElementById("heroBg");
  if (!canvas) return;
  const ctx = canvas.getContext("2d");
  let w, h, pts;

  function resize() {
    w = canvas.width = window.innerWidth;
    h = canvas.height = 260;
    pts = Array.from({ length: 60 }, () => ({
      x: Math.random() * w, y: Math.random() * h,
      vx: (Math.random() - 0.5) * 0.6, vy: (Math.random() - 0.5) * 0.6
    }));
  }
  resize();
  window.addEventListener("resize", resize);

  function draw() {
    ctx.clearRect(0,0,w,h);
    ctx.fillStyle = "#cde3ff";
    pts.forEach(p => {
      p.x += p.vx; p.y += p.vy;
      if (p.x < 0 || p.x > w) p.vx *= -1;
      if (p.y < 0 || p.y > h) p.vy *= -1;
      ctx.beginPath(); ctx.arc(p.x, p.y, 2, 0, Math.PI*2); ctx.fill();
    });
    ctx.strokeStyle = "rgba(205,227,255,0.2)";
    for (let i=0;i<pts.length;i++) for (let j=i+1;j<pts.length;j++) {
      const dx = pts[i].x-pts[j].x, dy = pts[i].y-pts[j].y;
      if (Math.sqrt(dx*dx+dy*dy) < 100) { ctx.beginPath(); ctx.moveTo(pts[i].x,pts[i].y); ctx.lineTo(pts[j].x,pts[j].y); ctx.stroke(); }
    }
    requestAnimationFrame(draw);
  }
  draw();
}

// ------- Main -------
async function load() {
  initHeroBg();
  setProgressText("ðŸš€ Starting harvest from SA + international Figshare + Zenodoâ€¦");

  try {
    // 1) Light pass across all institutions (2 pages each) for speed
    const figPromise = fetchAllInstitutions(2);

    // 2) Zenodo in parallel
    const zenPromise = fetchZenodo(5);

    const [figAll, zenAll] = await Promise.all([figPromise, zenPromise]);
    ALL_ITEMS = [...zenAll]; // Zenodo items live outside INST_CACHE

    // Build controls and initial view
    buildFilters();
    render();

    updateBar(100);
    setTimeout(() => (progressBar.style.opacity = "0"), 1200);
  } catch (e) {
    document.getElementById("results").innerHTML = `<div class="loading">Error fetching data: ${e.message}</div>`;
  }

  // Home reset
  document.getElementById("homeBtn")?.addEventListener("click", () => {
    ["categoryFilter","sourceFilter","institutionFilter","countryFilter"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.value = "";
    });
    const search = document.getElementById("searchInput");
    if (search) search.value = "";
    SEARCH_TEXT = "";
    CURRENT_PAGE = 1;
    render();
    window.scrollTo({ top: 0, behavior: "smooth" });
  });

  // Pagination controls
  document.getElementById("prevPage")?.addEventListener("click", () => {
    if (CURRENT_PAGE > 1) { CURRENT_PAGE--; render(); }
  });
  document.getElementById("nextPage")?.addEventListener("click", () => {
    CURRENT_PAGE++; render();
  });
}

document.addEventListener("DOMContentLoaded", load);
